@startuml

abstract class Observable {
{abstract} void subscribeActual(Observer<? super T> observer)
}
interface Observer<T> {
    {abstract} void onSubscribe(Disposable d)
    {abstract} onNext(T value)
    {abstract} onError(Throwable error)
    {abstract} onComplete()
}
abstract class Subject {
{abstract} boolean hasObservers()
{abstract} boolean hasThrowable()
{abstract} boolean hasComplete()
{abstract} Throwable getThrowable()
Subject<T> toSerialized()
}
class PublishSubject
class BehaviorSubject
class AsyncSubject
class ReplaySubject
class UnicastSubject
class SerializedSubject

Observable <|-- Subject
Observer <|.. Subject
Subject <|-- PublishSubject
Subject <|-- BehaviorSubject
Subject <|-- ReplaySubject
Subject <|-- AsyncSubject
Subject <|-- UnicastSubject
Subject <|-- SerializedSubject

@enduml