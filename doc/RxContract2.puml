@startuml
interface Publisher<T> {
{abstract} void subscribe(Subscriber<? super T> s)
}
abstract class Flowable<T> {
{abstract} void subscribeActual(Subscriber<? super T> s)
}

interface Subscription<T> {
{abstract}void request(long n)
{abstract}void cancel()
}

Publisher <|.. Flowable

class FlowableFilter<T>
class FlowableMap<T, U>
class FilterSubscriber<T>
class MapSubscriber<T, U>

Flowable <|-- FlowableFilter
Flowable <|-- FlowableMap

FlowableFilter +-- FilterSubscriber
FlowableMap +-- MapSubscriber

Subscription <|.. FilterSubscriber
Subscription <|.. MapSubscriber


@enduml