@startuml

interface Emitter<T> {
    {abstract} onNext(T value)
    {abstract} onError(Throwable error)
    {abstract} onComplete()
}
interface ObservableEmitter<T> {
    {abstract} isDisposed()
    {abstract} setDisposable(Disposable d)
    {abstract} setCancellable(Cancellable c)
    {abstract} serialize()
}
interface Disposable {
    {abstract} dispose()
    {abstract} isDisposed()
}

class CreateEmitter<T>
class ObservableCreate<T>
class GeneratorDisposable<T, S>
class ObservableGenerate<T, S>
abstract class Observable<T>


Emitter <|-- ObservableEmitter
ObservableEmitter <|.. CreateEmitter
ObservableCreate +-- CreateEmitter
Disposable <|. CreateEmitter
Emitter <|.. GeneratorDisposable
ObservableGenerate +-- GeneratorDisposable
Disposable <|.. GeneratorDisposable
Observable <|-- ObservableCreate
Observable <|-- ObservableGenerate



@enduml